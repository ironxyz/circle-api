/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentErrorCode : Indicates the failure reason of a payment. Only present for payments in failed state. Possible values are [`payment_failed`, `payment_fraud_detected`, `payment_denied`, `payment_not_supported_by_issuer`, `payment_not_funded`, `payment_unprocessable`, `payment_stopped_by_issuer`, `payment_canceled`, `payment_returned`, `payment_failed_balance_check`, `card_failed`, `card_invalid`, `card_address_mismatch`, `card_zip_mismatch`, `card_cvv_invalid`, `card_expired`, `card_limit_violated`, `card_not_honored`, `card_cvv_required`, `credit_card_not_allowed`, `card_account_ineligible`, `card_network_unsupported`, `channel_invalid`, `unauthorized_transaction`, `bank_account_ineligible`, `bank_transaction_error`, `invalid_account_number`, `invalid_wire_rtn`, `invalid_ach_rtn`, `vendor_inactive`]'
/// Indicates the failure reason of a payment. Only present for payments in failed state. Possible values are [`payment_failed`, `payment_fraud_detected`, `payment_denied`, `payment_not_supported_by_issuer`, `payment_not_funded`, `payment_unprocessable`, `payment_stopped_by_issuer`, `payment_canceled`, `payment_returned`, `payment_failed_balance_check`, `card_failed`, `card_invalid`, `card_address_mismatch`, `card_zip_mismatch`, `card_cvv_invalid`, `card_expired`, `card_limit_violated`, `card_not_honored`, `card_cvv_required`, `credit_card_not_allowed`, `card_account_ineligible`, `card_network_unsupported`, `channel_invalid`, `unauthorized_transaction`, `bank_account_ineligible`, `bank_transaction_error`, `invalid_account_number`, `invalid_wire_rtn`, `invalid_ach_rtn`, `vendor_inactive`]'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentErrorCode {
    #[serde(rename = "payment_failed")]
    PaymentFailed,
    #[serde(rename = "payment_fraud_detected")]
    PaymentFraudDetected,
    #[serde(rename = "payment_denied")]
    PaymentDenied,
    #[serde(rename = "payment_not_supported_by_issuer")]
    PaymentNotSupportedByIssuer,
    #[serde(rename = "payment_not_funded")]
    PaymentNotFunded,
    #[serde(rename = "payment_unprocessable")]
    PaymentUnprocessable,
    #[serde(rename = "payment_stopped_by_issuer")]
    PaymentStoppedByIssuer,
    #[serde(rename = "payment_canceled")]
    PaymentCanceled,
    #[serde(rename = "payment_returned")]
    PaymentReturned,
    #[serde(rename = "payment_failed_balance_check")]
    PaymentFailedBalanceCheck,
    #[serde(rename = "card_failed")]
    CardFailed,
    #[serde(rename = "card_invalid")]
    CardInvalid,
    #[serde(rename = "card_address_mismatch")]
    CardAddressMismatch,
    #[serde(rename = "card_zip_mismatch")]
    CardZipMismatch,
    #[serde(rename = "card_cvv_invalid")]
    CardCvvInvalid,
    #[serde(rename = "card_expired")]
    CardExpired,
    #[serde(rename = "card_limit_violated")]
    CardLimitViolated,
    #[serde(rename = "card_not_honored")]
    CardNotHonored,
    #[serde(rename = "card_cvv_required")]
    CardCvvRequired,
    #[serde(rename = "card_restricted,")]
    CardRestrictedComma,
    #[serde(rename = "card_account_ineligible")]
    CardAccountIneligible,
    #[serde(rename = "card_network_unsupported")]
    CardNetworkUnsupported,
    #[serde(rename = "channel_invalid")]
    ChannelInvalid,
    #[serde(rename = "unauthorized_transaction")]
    UnauthorizedTransaction,
    #[serde(rename = "bank_account_ineligible")]
    BankAccountIneligible,
    #[serde(rename = "bank_transaction_error")]
    BankTransactionError,
    #[serde(rename = "invalid_account_number")]
    InvalidAccountNumber,
    #[serde(rename = "invalid_wire_rtn")]
    InvalidWireRtn,
    #[serde(rename = "invalid_ach_rtn")]
    InvalidAchRtn,
    #[serde(rename = "ref_id_invalid")]
    RefIdInvalid,
    #[serde(rename = "account_name_mismatch")]
    AccountNameMismatch,
    #[serde(rename = "account_number_mismatch")]
    AccountNumberMismatch,
    #[serde(rename = "account_ineligible")]
    AccountIneligible,
    #[serde(rename = "wallet_address_mismatch")]
    WalletAddressMismatch,
    #[serde(rename = "customer_name_mismatch")]
    CustomerNameMismatch,
    #[serde(rename = "institution_name_mismatch")]
    InstitutionNameMismatch,
    #[serde(rename = "vendor_inactive")]
    VendorInactive,

}

impl std::fmt::Display for PaymentErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PaymentFailed => write!(f, "payment_failed"),
            Self::PaymentFraudDetected => write!(f, "payment_fraud_detected"),
            Self::PaymentDenied => write!(f, "payment_denied"),
            Self::PaymentNotSupportedByIssuer => write!(f, "payment_not_supported_by_issuer"),
            Self::PaymentNotFunded => write!(f, "payment_not_funded"),
            Self::PaymentUnprocessable => write!(f, "payment_unprocessable"),
            Self::PaymentStoppedByIssuer => write!(f, "payment_stopped_by_issuer"),
            Self::PaymentCanceled => write!(f, "payment_canceled"),
            Self::PaymentReturned => write!(f, "payment_returned"),
            Self::PaymentFailedBalanceCheck => write!(f, "payment_failed_balance_check"),
            Self::CardFailed => write!(f, "card_failed"),
            Self::CardInvalid => write!(f, "card_invalid"),
            Self::CardAddressMismatch => write!(f, "card_address_mismatch"),
            Self::CardZipMismatch => write!(f, "card_zip_mismatch"),
            Self::CardCvvInvalid => write!(f, "card_cvv_invalid"),
            Self::CardExpired => write!(f, "card_expired"),
            Self::CardLimitViolated => write!(f, "card_limit_violated"),
            Self::CardNotHonored => write!(f, "card_not_honored"),
            Self::CardCvvRequired => write!(f, "card_cvv_required"),
            Self::CardRestrictedComma => write!(f, "card_restricted,"),
            Self::CardAccountIneligible => write!(f, "card_account_ineligible"),
            Self::CardNetworkUnsupported => write!(f, "card_network_unsupported"),
            Self::ChannelInvalid => write!(f, "channel_invalid"),
            Self::UnauthorizedTransaction => write!(f, "unauthorized_transaction"),
            Self::BankAccountIneligible => write!(f, "bank_account_ineligible"),
            Self::BankTransactionError => write!(f, "bank_transaction_error"),
            Self::InvalidAccountNumber => write!(f, "invalid_account_number"),
            Self::InvalidWireRtn => write!(f, "invalid_wire_rtn"),
            Self::InvalidAchRtn => write!(f, "invalid_ach_rtn"),
            Self::RefIdInvalid => write!(f, "ref_id_invalid"),
            Self::AccountNameMismatch => write!(f, "account_name_mismatch"),
            Self::AccountNumberMismatch => write!(f, "account_number_mismatch"),
            Self::AccountIneligible => write!(f, "account_ineligible"),
            Self::WalletAddressMismatch => write!(f, "wallet_address_mismatch"),
            Self::CustomerNameMismatch => write!(f, "customer_name_mismatch"),
            Self::InstitutionNameMismatch => write!(f, "institution_name_mismatch"),
            Self::VendorInactive => write!(f, "vendor_inactive"),
        }
    }
}

impl Default for PaymentErrorCode {
    fn default() -> PaymentErrorCode {
        Self::PaymentFailed
    }
}

