/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RiskEvaluation : Results of risk evaluation. Only present if the payment is denied by Circle's risk service.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RiskEvaluation {
    /// Enumerated decision of the account.
    #[serde(rename = "decision", skip_serializing_if = "Option::is_none")]
    pub decision: Option<Decision>,
    /// Risk reason for the definitive decision outcome.
    #[serde(rename = "reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Option<String>>,
}

impl RiskEvaluation {
    /// Results of risk evaluation. Only present if the payment is denied by Circle's risk service.
    pub fn new() -> RiskEvaluation {
        RiskEvaluation {
            decision: None,
            reason: None,
        }
    }
}
/// Enumerated decision of the account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Decision {
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "denied")]
    Denied,
    #[serde(rename = "review")]
    Review,
}

impl Default for Decision {
    fn default() -> Decision {
        Self::Approved
    }
}

