/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Timeline {
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Context>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "time")]
    pub time: String,
}

impl Timeline {
    pub fn new(status: Status, time: String) -> Timeline {
        Timeline {
            status,
            context: None,
            reason: None,
            time,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "refunded")]
    Refunded,
}

impl Default for Status {
    fn default() -> Status {
        Self::Created
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Context {
    #[serde(rename = "underpaid")]
    Underpaid,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "overpaid")]
    Overpaid,
}

impl Default for Context {
    fn default() -> Context {
        Self::Underpaid
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "requested_by_merchant")]
    RequestedByMerchant,
    #[serde(rename = "fee_collection_failed")]
    FeeCollectionFailed,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::RequestedByMerchant
    }
}

