/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CryptoPayment : Status information of the related payment.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CryptoPayment {
    /// Unique system generated identifier for the entity.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Type of the payment object.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Unique system generated identifier for the merchant.
    #[serde(rename = "merchantId")]
    pub merchant_id: uuid::Uuid,
    /// Unique system generated identifier for the wallet of the merchant.
    #[serde(rename = "merchantWalletId", skip_serializing_if = "Option::is_none")]
    pub merchant_wallet_id: Option<String>,
    #[serde(rename = "amount")]
    pub amount: Box<models::CryptoPaymentsOptionalAmountMoney>,
    #[serde(rename = "status")]
    pub status: models::PaymentStatus,
    #[serde(rename = "fees", skip_serializing_if = "Option::is_none")]
    pub fees: Option<Box<models::FiatMoneyUsd>>,
    #[serde(rename = "networkFees", skip_serializing_if = "Option::is_none")]
    pub network_fees: Option<Box<models::CryptoPaymentNetworkFee>>,
    #[serde(rename = "paymentIntentId", skip_serializing_if = "Option::is_none")]
    pub payment_intent_id: Option<uuid::Uuid>,
    #[serde(rename = "settlementAmount", skip_serializing_if = "Option::is_none")]
    pub settlement_amount: Option<Box<models::FiatMoneyUsd>>,
    #[serde(rename = "fromAddresses", skip_serializing_if = "Option::is_none")]
    pub from_addresses: Option<Box<models::CryptoPaymentFromAddresses>>,
    #[serde(rename = "depositAddress", skip_serializing_if = "Option::is_none")]
    pub deposit_address: Option<Box<models::CryptoPaymentDepositAddress>>,
    #[serde(rename = "transactionHash", skip_serializing_if = "Option::is_none")]
    pub transaction_hash: Option<String>,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "createDate", skip_serializing_if = "Option::is_none")]
    pub create_date: Option<String>,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "updateDate", skip_serializing_if = "Option::is_none")]
    pub update_date: Option<String>,
    #[serde(rename = "riskEvaluation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub risk_evaluation: Option<Option<Box<models::RiskEvaluation>>>,
}

impl CryptoPayment {
    /// Status information of the related payment.
    pub fn new(id: uuid::Uuid, r#type: Type, merchant_id: uuid::Uuid, amount: models::CryptoPaymentsOptionalAmountMoney, status: models::PaymentStatus) -> CryptoPayment {
        CryptoPayment {
            id,
            r#type,
            merchant_id,
            merchant_wallet_id: None,
            amount: Box::new(amount),
            status,
            fees: None,
            network_fees: None,
            payment_intent_id: None,
            settlement_amount: None,
            from_addresses: None,
            deposit_address: None,
            transaction_hash: None,
            create_date: None,
            update_date: None,
            risk_evaluation: None,
        }
    }
}
/// Type of the payment object.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "payment")]
    Payment,
    #[serde(rename = "refund")]
    Refund,
}

impl Default for Type {
    fn default() -> Type {
        Self::Payment
    }
}

