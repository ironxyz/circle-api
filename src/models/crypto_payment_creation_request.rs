/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CryptoPaymentCreationRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    /// Payment intent uuid which is generated by the create payment intent call
    #[serde(rename = "paymentIntentId")]
    pub payment_intent_id: String,
    #[serde(rename = "protocolMetadata")]
    pub protocol_metadata: Box<models::MetadataCryptoPayment>,
    #[serde(rename = "amount")]
    pub amount: Box<models::CryptoPaymentsMoney>,
    #[serde(rename = "source")]
    pub source: Box<models::CryptoPaymentSource>,
    #[serde(rename = "destination")]
    pub destination: Box<models::CryptoPaymentDestination>,
    /// Network fee quote uuid which is returned from the /presign response. Only required when end user pays for gas fee
    #[serde(rename = "quoteId", skip_serializing_if = "Option::is_none")]
    pub quote_id: Option<uuid::Uuid>,
}

impl CryptoPaymentCreationRequest {
    pub fn new(idempotency_key: uuid::Uuid, payment_intent_id: String, protocol_metadata: models::MetadataCryptoPayment, amount: models::CryptoPaymentsMoney, source: models::CryptoPaymentSource, destination: models::CryptoPaymentDestination) -> CryptoPaymentCreationRequest {
        CryptoPaymentCreationRequest {
            idempotency_key,
            payment_intent_id,
            protocol_metadata: Box::new(protocol_metadata),
            amount: Box::new(amount),
            source: Box::new(source),
            destination: Box::new(destination),
            quote_id: None,
        }
    }
}

