/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityAddress {
    /// Line one of the street address.
    #[serde(rename = "line1")]
    pub line1: String,
    /// Line two of the street address.
    #[serde(rename = "line2", skip_serializing_if = "Option::is_none")]
    pub line2: Option<String>,
    /// City portion of the address.
    #[serde(rename = "city")]
    pub city: String,
    /// State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.
    #[serde(rename = "district")]
    pub district: String,
    /// Postal / ZIP code of the address.
    #[serde(rename = "postalCode")]
    pub postal_code: String,
    /// Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.
    #[serde(rename = "country")]
    pub country: String,
}

impl IdentityAddress {
    pub fn new(line1: String, city: String, district: String, postal_code: String, country: String) -> IdentityAddress {
        IdentityAddress {
            line1,
            line2: None,
            city,
            district,
            postal_code,
            country,
        }
    }
}

