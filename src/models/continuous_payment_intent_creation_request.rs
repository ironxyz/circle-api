/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContinuousPaymentIntentCreationRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    /// Desired currency for the payment
    #[serde(rename = "currency")]
    pub currency: Currency,
    /// Desired currency for the payments to settle in.
    #[serde(rename = "settlementCurrency")]
    pub settlement_currency: SettlementCurrency,
    #[serde(rename = "paymentMethods")]
    pub payment_methods: Vec<models::PaymentMethodBlockchain>,
    /// Unique system generated identifier for the wallet of the merchant.
    #[serde(rename = "merchantWalletId", skip_serializing_if = "Option::is_none")]
    pub merchant_wallet_id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl ContinuousPaymentIntentCreationRequest {
    pub fn new(idempotency_key: uuid::Uuid, currency: Currency, settlement_currency: SettlementCurrency, payment_methods: Vec<models::PaymentMethodBlockchain>) -> ContinuousPaymentIntentCreationRequest {
        ContinuousPaymentIntentCreationRequest {
            idempotency_key,
            currency,
            settlement_currency,
            payment_methods,
            merchant_wallet_id: None,
            r#type: None,
        }
    }
}
/// Desired currency for the payment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "USD")]
    Usd,
    #[serde(rename = "BTC")]
    Btc,
    #[serde(rename = "ETH")]
    Eth,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Usd
    }
}
/// Desired currency for the payments to settle in.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SettlementCurrency {
    #[serde(rename = "USD")]
    Usd,
    #[serde(rename = "BTC")]
    Btc,
    #[serde(rename = "ETH")]
    Eth,
}

impl Default for SettlementCurrency {
    fn default() -> SettlementCurrency {
        Self::Usd
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "continuous")]
    Continuous,
}

impl Default for Type {
    fn default() -> Type {
        Self::Continuous
    }
}

