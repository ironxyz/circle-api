/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransferErrorCode : Indicates the failure reason of a transfer. Only present for transfers in a `failed` state. Possible values are `insufficient_funds`, `blockchain_error` and `transfer_denied` and `transfer_failed`
/// Indicates the failure reason of a transfer. Only present for transfers in a `failed` state. Possible values are `insufficient_funds`, `blockchain_error` and `transfer_denied` and `transfer_failed`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransferErrorCode {
    #[serde(rename = "transfer_failed")]
    TransferFailed,
    #[serde(rename = "transfer_denied")]
    TransferDenied,
    #[serde(rename = "blockchain_error")]
    BlockchainError,
    #[serde(rename = "insufficient_funds")]
    InsufficientFunds,

}

impl std::fmt::Display for TransferErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::TransferFailed => write!(f, "transfer_failed"),
            Self::TransferDenied => write!(f, "transfer_denied"),
            Self::BlockchainError => write!(f, "blockchain_error"),
            Self::InsufficientFunds => write!(f, "insufficient_funds"),
        }
    }
}

impl Default for TransferErrorCode {
    fn default() -> TransferErrorCode {
        Self::TransferFailed
    }
}

