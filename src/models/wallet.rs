/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Wallet {
    /// Wallet identifier. Numeric value but should be treated as a string as format may change in the future'
    #[serde(rename = "walletId", skip_serializing_if = "Option::is_none")]
    pub wallet_id: Option<String>,
    /// Universally unique identifier (UUID v4) of the entity that owns the wallet.
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    /// Wallet type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// A human-friendly, non-unique identifier for a wallet.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A list of balances for currencies owned by the wallet.
    #[serde(rename = "balances", skip_serializing_if = "Option::is_none")]
    pub balances: Option<Vec<models::Money>>,
}

impl Wallet {
    pub fn new() -> Wallet {
        Wallet {
            wallet_id: None,
            entity_id: None,
            r#type: None,
            description: None,
            balances: None,
        }
    }
}
/// Wallet type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "end_user_wallet")]
    EndUserWallet,
}

impl Default for Type {
    fn default() -> Type {
        Self::EndUserWallet
    }
}

