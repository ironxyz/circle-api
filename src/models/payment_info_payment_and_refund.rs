/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentInfoPaymentAndRefund : Status information of the related payment. This property is only present on refund or cancel items.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentInfoPaymentAndRefund {
    /// Unique system generated identifier for the entity.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Type of the payment object.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<models::FiatMoneyUsd>,
    /// Enumerated description of the payment item.
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<Description>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::PaymentStatus>,
    #[serde(rename = "requiredAction", skip_serializing_if = "Option::is_none")]
    pub required_action: Option<models::RequiredAction>,
    #[serde(rename = "fees", skip_serializing_if = "Option::is_none")]
    pub fees: Option<models::FiatMoneyUsd>,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "createDate", skip_serializing_if = "Option::is_none")]
    pub create_date: Option<String>,
}

impl PaymentInfoPaymentAndRefund {
    /// Status information of the related payment. This property is only present on refund or cancel items.
    pub fn new() -> PaymentInfoPaymentAndRefund {
        PaymentInfoPaymentAndRefund {
            id: None,
            r#type: None,
            amount: None,
            description: None,
            status: None,
            required_action: None,
            fees: None,
            create_date: None,
        }
    }
}
/// Type of the payment object.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "payment")]
    Payment,
    #[serde(rename = "refund")]
    Refund,
}

impl Default for Type {
    fn default() -> Type {
        Self::Payment
    }
}
/// Enumerated description of the payment item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Description {
    #[serde(rename = "Payment")]
    Payment,
}

impl Default for Description {
    fn default() -> Description {
        Self::Payment
    }
}

