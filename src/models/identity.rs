/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Identity : The identity of the originator. Identities are required when:   * `destination.type: \"blockchain\"`   * `destination.chain: \"ETH\"`   * `amount.amount` >= $3,000 in value 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Identity {
    /// The type of identity for the originator. * `individual` - A uniquely distinguishable individual. * `business` - Any entity other than a natural person that can establish a permanent customer relationship with an affected entity or otherwise own property. This can include companies, foundations, anstalt, partnerships, associations and other relevantly similar entities. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Full name of the identity.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "addresses")]
    pub addresses: Vec<models::IdentityAddress>,
}

impl Identity {
    /// The identity of the originator. Identities are required when:   * `destination.type: \"blockchain\"`   * `destination.chain: \"ETH\"`   * `amount.amount` >= $3,000 in value 
    pub fn new(r#type: Type, name: String, addresses: Vec<models::IdentityAddress>) -> Identity {
        Identity {
            r#type,
            name,
            addresses,
        }
    }
}
/// The type of identity for the originator. * `individual` - A uniquely distinguishable individual. * `business` - Any entity other than a natural person that can establish a permanent customer relationship with an affected entity or otherwise own property. This can include companies, foundations, anstalt, partnerships, associations and other relevantly similar entities. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "individual")]
    Individual,
    #[serde(rename = "business")]
    Business,
}

impl Default for Type {
    fn default() -> Type {
        Self::Individual
    }
}

