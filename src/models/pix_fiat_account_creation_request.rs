/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PixFiatAccountCreationRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    /// Name of the beneficiary.
    #[serde(rename = "name")]
    pub name: String,
    /// Beneficiary account number.
    #[serde(rename = "accountNumber")]
    pub account_number: String,
    /// Beneficiary ISPB.
    #[serde(rename = "ispb")]
    pub ispb: String,
    /// Beneficiary account branch code.
    #[serde(rename = "branchCode")]
    pub branch_code: String,
    /// Beneficiary Tax ID.
    #[serde(rename = "taxId")]
    pub tax_id: String,
    #[serde(rename = "accountType")]
    pub account_type: models::PixAccountType,
}

impl PixFiatAccountCreationRequest {
    pub fn new(idempotency_key: uuid::Uuid, name: String, account_number: String, ispb: String, branch_code: String, tax_id: String, account_type: models::PixAccountType) -> PixFiatAccountCreationRequest {
        PixFiatAccountCreationRequest {
            idempotency_key,
            name,
            account_number,
            ispb,
            branch_code,
            tax_id,
            account_type,
        }
    }
}

