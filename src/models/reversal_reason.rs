/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReversalReason : Enumerated reason for a returned payment. Providing this reason in the request is recommended (to improve risk evaluation) but not required.
/// Enumerated reason for a returned payment. Providing this reason in the request is recommended (to improve risk evaluation) but not required.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReversalReason {
    #[serde(rename = "duplicate")]
    Duplicate,
    #[serde(rename = "fraudulent")]
    Fraudulent,
    #[serde(rename = "requested_by_customer")]
    RequestedByCustomer,
    #[serde(rename = "bank_transaction_error")]
    BankTransactionError,
    #[serde(rename = "invalid_account_number")]
    InvalidAccountNumber,
    #[serde(rename = "insufficient_funds")]
    InsufficientFunds,
    #[serde(rename = "payment_stopped_by_issuer")]
    PaymentStoppedByIssuer,
    #[serde(rename = "payment_returned")]
    PaymentReturned,
    #[serde(rename = "bank_account_ineligible")]
    BankAccountIneligible,
    #[serde(rename = "invalid_ach_rtn")]
    InvalidAchRtn,
    #[serde(rename = "unauthorized_transaction")]
    UnauthorizedTransaction,
    #[serde(rename = "payment_failed")]
    PaymentFailed,

}

impl std::fmt::Display for ReversalReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Duplicate => write!(f, "duplicate"),
            Self::Fraudulent => write!(f, "fraudulent"),
            Self::RequestedByCustomer => write!(f, "requested_by_customer"),
            Self::BankTransactionError => write!(f, "bank_transaction_error"),
            Self::InvalidAccountNumber => write!(f, "invalid_account_number"),
            Self::InsufficientFunds => write!(f, "insufficient_funds"),
            Self::PaymentStoppedByIssuer => write!(f, "payment_stopped_by_issuer"),
            Self::PaymentReturned => write!(f, "payment_returned"),
            Self::BankAccountIneligible => write!(f, "bank_account_ineligible"),
            Self::InvalidAchRtn => write!(f, "invalid_ach_rtn"),
            Self::UnauthorizedTransaction => write!(f, "unauthorized_transaction"),
            Self::PaymentFailed => write!(f, "payment_failed"),
        }
    }
}

impl Default for ReversalReason {
    fn default() -> ReversalReason {
        Self::Duplicate
    }
}

