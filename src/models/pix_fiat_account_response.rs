/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PixFiatAccountResponse {
    /// Unique system generated identifier for the entity.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "status")]
    pub status: models::ExternalFiatAccountStatus,
    /// Bank name plus last four digits of the PIX account number.
    #[serde(rename = "description")]
    pub description: String,
    /// Wire tracking ref that needs to be set in the wire reference to beneficiary field.
    #[serde(rename = "trackingRef")]
    pub tracking_ref: String,
    #[serde(rename = "riskEvaluation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub risk_evaluation: Option<Option<models::RiskEvaluation>>,
    /// A UUID that uniquely identifies the account number. If the same account is used more than once, each card object will have a different id, but the fingerprint will stay the same.
    #[serde(rename = "fingerprint")]
    pub fingerprint: String,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "createDate")]
    pub create_date: String,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "updateDate")]
    pub update_date: String,
}

impl PixFiatAccountResponse {
    pub fn new(id: uuid::Uuid, status: models::ExternalFiatAccountStatus, description: String, tracking_ref: String, fingerprint: String, create_date: String, update_date: String) -> PixFiatAccountResponse {
        PixFiatAccountResponse {
            id,
            status,
            description,
            tracking_ref,
            risk_evaluation: None,
            fingerprint,
            create_date,
            update_date,
        }
    }
}

