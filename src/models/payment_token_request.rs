/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentTokenRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    /// Type of the digital wallet token.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "tokenData")]
    pub token_data: models::PaymentTokenRequestTokenData,
}

impl PaymentTokenRequest {
    pub fn new(idempotency_key: uuid::Uuid, r#type: Type, token_data: models::PaymentTokenRequestTokenData) -> PaymentTokenRequest {
        PaymentTokenRequest {
            idempotency_key,
            r#type,
            token_data,
        }
    }
}
/// Type of the digital wallet token.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "applepay")]
    Applepay,
    #[serde(rename = "googlepay")]
    Googlepay,
}

impl Default for Type {
    fn default() -> Type {
        Self::Applepay
    }
}

