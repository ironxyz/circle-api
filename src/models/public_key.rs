/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicKey {
    /// Universally unique identifier (UUID v4) of the public key used in encryption. NOTE the sandbox environment uses the default value of `key1`. For this reason the example supplied is `key1` rather than a UUID.
    #[serde(rename = "keyId")]
    pub key_id: uuid::Uuid,
    /// A PGP ascii-armor encoded public key.
    #[serde(rename = "publicKey")]
    pub public_key: String,
}

impl PublicKey {
    pub fn new(key_id: uuid::Uuid, public_key: String) -> PublicKey {
        PublicKey {
            key_id,
            public_key,
        }
    }
}

