/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenizedCardDetails {
    /// The card's expiration month.
    #[serde(rename = "expMonth")]
    pub exp_month: i32,
    /// Four digit number representing the card's expiration year.
    #[serde(rename = "expYear")]
    pub exp_year: i32,
    /// The network of the card.
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<Network>,
    /// The last 4 digits of the card.
    #[serde(rename = "last4")]
    pub last4: String,
    /// The bank identification number (BIN), the first 6 digits of the card.
    #[serde(rename = "bin")]
    pub bin: String,
    /// The funding type of the card.
    #[serde(rename = "fundingType", skip_serializing_if = "Option::is_none")]
    pub funding_type: Option<FundingType>,
    /// The country code of the issuer bank. Follows the ISO 3166-1 alpha-2 standard.
    #[serde(rename = "issuerCountry", skip_serializing_if = "Option::is_none")]
    pub issuer_country: Option<String>,
}

impl TokenizedCardDetails {
    pub fn new(exp_month: i32, exp_year: i32, last4: String, bin: String) -> TokenizedCardDetails {
        TokenizedCardDetails {
            exp_month,
            exp_year,
            network: None,
            last4,
            bin,
            funding_type: None,
            issuer_country: None,
        }
    }
}
/// The network of the card.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Network {
    #[serde(rename = "VISA")]
    Visa,
    #[serde(rename = "MASTERCARD")]
    Mastercard,
    #[serde(rename = "AMEX")]
    Amex,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for Network {
    fn default() -> Network {
        Self::Visa
    }
}
/// The funding type of the card.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FundingType {
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "debit")]
    Debit,
    #[serde(rename = "prepaid")]
    Prepaid,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for FundingType {
    fn default() -> FundingType {
        Self::Credit
    }
}

