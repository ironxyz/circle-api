/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentCreationRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    /// Universally unique identifier (UUID v4) of the public key used in encryption. NOTE the sandbox environment uses the default value of `key1`. For this reason the example supplied is `key1` rather than a UUID.
    #[serde(rename = "keyId", skip_serializing_if = "Option::is_none")]
    pub key_id: Option<uuid::Uuid>,
    #[serde(rename = "metadata")]
    pub metadata: models::MetadataPayment,
    #[serde(rename = "amount")]
    pub amount: models::FiatMoneyUsd,
    /// Triggers the automatic capture of the full payment amount. If set to false the payment will only be authorized but not captured.
    #[serde(rename = "autoCapture", skip_serializing_if = "Option::is_none")]
    pub auto_capture: Option<bool>,
    /// Indicates the verification method for this payment.
    #[serde(rename = "verification")]
    pub verification: Verification,
    /// The URL to redirect users to after successful 3DS authentication.
    #[serde(rename = "verificationSuccessUrl", skip_serializing_if = "Option::is_none")]
    pub verification_success_url: Option<String>,
    /// The URL to redirect users to after failed 3DS authentication.
    #[serde(rename = "verificationFailureUrl", skip_serializing_if = "Option::is_none")]
    pub verification_failure_url: Option<String>,
    #[serde(rename = "source")]
    pub source: models::Source,
    /// Description of the payment with length restriction of 240 characters.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// PGP encrypted base64 encoded string. Contains CVV. * **CVV (Card Verification Number)**: Three or four digit security code. Only required if `verification` is `cvv`. 
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "encryptedData", skip_serializing_if = "Option::is_none")]
    pub encrypted_data: Option<Vec<u8>>,
    /// The channel identifier that can be set for the payment. When not provided, the default channel is used.
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<uuid::Uuid>,
}

impl PaymentCreationRequest {
    pub fn new(idempotency_key: uuid::Uuid, metadata: models::MetadataPayment, amount: models::FiatMoneyUsd, verification: Verification, source: models::Source) -> PaymentCreationRequest {
        PaymentCreationRequest {
            idempotency_key,
            key_id: None,
            metadata,
            amount,
            auto_capture: None,
            verification,
            verification_success_url: None,
            verification_failure_url: None,
            source,
            description: None,
            encrypted_data: None,
            channel: None,
        }
    }
}
/// Indicates the verification method for this payment.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Verification {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cvv")]
    Cvv,
    #[serde(rename = "three_d_secure")]
    ThreeDSecure,
}

impl Default for Verification {
    fn default() -> Verification {
        Self::None
    }
}

