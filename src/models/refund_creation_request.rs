/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RefundCreationRequest {
    /// Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.
    #[serde(rename = "idempotencyKey")]
    pub idempotency_key: uuid::Uuid,
    #[serde(rename = "amount")]
    pub amount: Box<models::FiatMoneyUsd>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<models::ReversalReason>,
}

impl RefundCreationRequest {
    pub fn new(idempotency_key: uuid::Uuid, amount: models::FiatMoneyUsd) -> RefundCreationRequest {
        RefundCreationRequest {
            idempotency_key,
            amount: Box::new(amount),
            reason: None,
        }
    }
}

