/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RequiredAction : When the payment status is `action_required`, this object summarizes the required additional steps.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequiredAction {
    /// The type of action that is required to proceed with the payment. Currently only one type is supported.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The URL to bring the user to in order to complete the payment.
    #[serde(rename = "redirectUrl")]
    pub redirect_url: String,
}

impl RequiredAction {
    /// When the payment status is `action_required`, this object summarizes the required additional steps.
    pub fn new(r#type: Type, redirect_url: String) -> RequiredAction {
        RequiredAction {
            r#type,
            redirect_url,
        }
    }
}
/// The type of action that is required to proceed with the payment. Currently only one type is supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "three_d_secure_required")]
    ThreeDSecureRequired,
}

impl Default for Type {
    fn default() -> Type {
        Self::ThreeDSecureRequired
    }
}

