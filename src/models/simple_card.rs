/*
 * All Circle APIs
 *
 * Circle's General, Core Functionality, Payments, Payouts, Accounts, and Crypto Payments APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 2.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimpleCard {
    /// Unique system generated identifier for the entity.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "status")]
    pub status: models::ExternalFiatAccountStatus,
    #[serde(rename = "billingDetails")]
    pub billing_details: models::SimpleBillingDetails,
    /// Two digit number representing the card's expiration month.
    #[serde(rename = "expMonth")]
    pub exp_month: i32,
    /// Four digit number representing the card's expiration year.
    #[serde(rename = "expYear")]
    pub exp_year: i32,
    /// The network of the card.
    #[serde(rename = "network")]
    pub network: Network,
    /// The bank identification number (BIN), the first 6 digits of the card.
    #[serde(rename = "bin", skip_serializing_if = "Option::is_none")]
    pub bin: Option<String>,
    /// The country code of the issuer bank. Follows the ISO 3166-1 alpha-2 standard.
    #[serde(rename = "issuerCountry", skip_serializing_if = "Option::is_none")]
    pub issuer_country: Option<String>,
    /// The funding type of the card. Possible values are `credit`, `debit`, `prepaid`, and `unknown`.
    #[serde(rename = "fundingType", skip_serializing_if = "Option::is_none")]
    pub funding_type: Option<FundingType>,
    /// A UUID that uniquely identifies the account number. If the same account is used more than once, each card object will have a different id, but the fingerprint will stay the same.
    #[serde(rename = "fingerprint")]
    pub fingerprint: String,
    #[serde(rename = "verification")]
    pub verification: models::CardVerificationResponse,
    #[serde(rename = "riskEvaluation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub risk_evaluation: Option<Option<models::RiskEvaluation>>,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "createDate")]
    pub create_date: String,
    /// ISO-8601 UTC date/time format.
    #[serde(rename = "updateDate")]
    pub update_date: String,
}

impl SimpleCard {
    pub fn new(id: uuid::Uuid, status: models::ExternalFiatAccountStatus, billing_details: models::SimpleBillingDetails, exp_month: i32, exp_year: i32, network: Network, fingerprint: String, verification: models::CardVerificationResponse, create_date: String, update_date: String) -> SimpleCard {
        SimpleCard {
            id,
            status,
            billing_details,
            exp_month,
            exp_year,
            network,
            bin: None,
            issuer_country: None,
            funding_type: None,
            fingerprint,
            verification,
            risk_evaluation: None,
            create_date,
            update_date,
        }
    }
}
/// The network of the card.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Network {
    #[serde(rename = "VISA")]
    Visa,
    #[serde(rename = "MASTERCARD")]
    Mastercard,
    #[serde(rename = "AMEX")]
    Amex,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for Network {
    fn default() -> Network {
        Self::Visa
    }
}
/// The funding type of the card. Possible values are `credit`, `debit`, `prepaid`, and `unknown`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FundingType {
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "debit")]
    Debit,
    #[serde(rename = "prepaid")]
    Prepaid,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for FundingType {
    fn default() -> FundingType {
        Self::Credit
    }
}

